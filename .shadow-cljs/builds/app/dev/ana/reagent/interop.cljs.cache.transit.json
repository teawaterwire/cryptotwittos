["^ ","~:output",["^ ","~:js","goog.provide('reagent.interop');\ngoog.require('cljs.core');\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ "],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:macros",["^ ","~$$!",["^ ","~:arglists",["~#list",[["~$object","~$field","~$value"]]],"~:doc","Set field in a javascript object, in a Closure-safe way.\n  'field' should be a keyword or a symbol starting with '-'.\n  'field' may contain '.', to allow access in nested objects.\n  If 'object' is a symbol it is not allowed contain '.'.\n\n  ($! o :foo 1) is equivalent to (set! (.-foo o) 1), except that it\n  gives the same result under advanced compilation.","~:line",45,"~:column",1,"~:file","reagent/interop.clj","~:name","~$reagent.interop/$!","~:ns","~$reagent.interop","~:macro",true],"~$$",["^ ","^B",["^C",[["^D","~$member","~$&","~$args"]]],"^G","Access member in a javascript object, in a Closure-safe way.\n  'member' is assumed to be a field if it is a keyword or if\n  the name starts with '-', otherwise the named function is\n  called with the optional args.\n  'member' may contain '.', to allow access in nested objects.\n  If 'object' is a symbol it is not allowed contain '.'.\n\n  ($ o :foo) is equivalent to (.-foo o), except that it gives\n  the same result under advanced compilation.\n  ($ o foo arg1 arg2) is the same as (.foo o arg1 arg2).","^H",25,"^I",1,"^J","reagent/interop.clj","^K","~$reagent.interop/$","^M","^N","^O",true]],"^K","^N","~:op","^M","~:imports",null,"~:requires",["^ ","~$cljs.core","^V","~$goog","^W"],"~:seen",["^?",["~:require-macros"]],"~:uses",null,"^Y",["^ ","^N","^N","^V","^V"],"~:form",["^C",["~$ns","^N",["^C",["^Y",["^N"]]]]],"~:flags",["^ ","^Y",["^?",[]]],"~:js-deps",["^ "],"~:deps",["^W","^V"]],"^M","^N","~:resource-id",["~:shadow.build.classpath/resource","reagent/interop.cljs"],"~:compiled-at",1519925419135,"~:resource-name","reagent/interop.cljs","~:warnings",[],"~:source","(ns reagent.interop\n  (:require-macros [reagent.interop]))\n","~:reader-features",["^?",["~:cljs"]],"~:source-map",["^ "],"~:cljc",false],"~:cache-keys",["~#cmap",[["^O","^V"],1507131355000,["^15","goog/math/math.js"],1506418332000,["^15","goog/array/array.js"],1506418332000,["^15","goog/debug/error.js"],1506418332000,["^15","goog/dom/nodetype.js"],1506418332000,["^15","goog/object/object.js"],1506418332000,"~:SHADOW-TIMESTAMP",1519924824000,["^15","goog/math/long.js"],1506418332000,["^O","^N"],1519924823000,["^15","goog/functions/functions.js"],1506418332000,["^15","goog/structs/map.js"],1506418332000,["^15","goog/asserts/asserts.js"],1506418332000,["^15","goog/uri/uri.js"],1506418332000,["^15","goog/base.js"],1506418332000,["^15","goog/structs/structs.js"],1506418332000,["^15","goog/string/string.js"],1506418332000,["^15","goog/reflect/reflect.js"],1506418332000,["^15","goog/string/stringbuffer.js"],1506418332000,["^15","goog/iter/iter.js"],1506418332000,["^15","reagent/interop.cljs"],1519924823000,["^15","cljs/core.cljs"],1507131355000,["^15","goog/math/integer.js"],1506418332000,["^15","goog/uri/utils.js"],1506418332000]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ "],"^6",["^ ","^7","^8","^9","^:","^;","^<"],"^=",null,"^>",["^?",[]],"^@",["^ ","^A",["^ ","^B",["^C",[["^D","^E","^F"]]],"^G","Set field in a javascript object, in a Closure-safe way.\n  'field' should be a keyword or a symbol starting with '-'.\n  'field' may contain '.', to allow access in nested objects.\n  If 'object' is a symbol it is not allowed contain '.'.\n\n  ($! o :foo 1) is equivalent to (set! (.-foo o) 1), except that it\n  gives the same result under advanced compilation.","^H",45,"^I",1,"^J","reagent/interop.clj","^K","^L","^M","^N","^O",true],"~$$",["^ ","^B",["^C",[["^D","^P","~$&","^Q"]]],"^G","Access member in a javascript object, in a Closure-safe way.\n  'member' is assumed to be a field if it is a keyword or if\n  the name starts with '-', otherwise the named function is\n  called with the optional args.\n  'member' may contain '.', to allow access in nested objects.\n  If 'object' is a symbol it is not allowed contain '.'.\n\n  ($ o :foo) is equivalent to (.-foo o), except that it gives\n  the same result under advanced compilation.\n  ($ o foo arg1 arg2) is the same as (.foo o arg1 arg2).","^H",25,"^I",1,"^J","reagent/interop.clj","^K","^R","^M","^N","^O",true]],"^K","^N","^T",null,"^U",["^ ","^V","^V","^W","^W"],"^X",["^?",["^Y"]],"^Z",null,"^Y",["^ ","^N","^N","^V","^V"],"^11",["^ ","^Y",["^?",[]]],"^12",["^ "],"^13",["^W","^V"]],"^M","^N","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1?",[["^1D","~:static-fns"],true,["^1D","~:elide-asserts"],false,["^1D","~:optimize-constants"],null,["^1D","~:emit-constants"],null,["^1D","~:infer-externs"],true,["^1D","^1:"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^1D","~:fn-invoke-direct"],null,["^1D","^1<"],"/dev/null"]]]