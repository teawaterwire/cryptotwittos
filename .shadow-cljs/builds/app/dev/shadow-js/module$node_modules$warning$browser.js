["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/warning/browser.js"],"~:js","shadow$provide.module$node_modules$warning$browser=function(b,e,a,d,f){b=function(){};b=function(a,b,d){var c=arguments.length;d=Array(2<c?c-2:0);for(var e=2;e<c;e++)d[e-2]=arguments[e];if(void 0===b)throw Error(\"`warning(condition, format, ...args)` requires a warning message argument\");if(10>b.length||/^[s\\W]*$/.test(b))throw Error(\"The warning format should be able to uniquely identify this warning. Please, use a more descriptive format than: \"+b);if(!a){var f=0;c=\"Warning: \"+b.replace(/%s/g,function(){return d[f++]});\n\"undefined\"!==typeof console&&console.error(c);try{throw Error(c);}catch(p){}}};d.exports=b}","~:source","shadow$provide[\"module$node_modules$warning$browser\"] = function(global,process,require,module,exports) {\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (format.length < 10 || (/^[s\\W]*$/).test(format)) {\n      throw new Error(\n        'The warning format should be able to uniquely identify this ' +\n        'warning. Please, use a more descriptive format than: ' + format\n      );\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' +\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch(x) {}\n    }\n  };\n}\n\nmodule.exports = warning;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1519929620005,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$warning$browser.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,oCAAA,CAAwD,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAwBC,CAAxB,CAA+BC,CAA/B,CAAwC,CAmBpGC,CAAAA,CAAUA,QAAQ,EAAG,EAGvBA,EAAA,CAAUA,QAAQ,CAACC,CAAD,CAAYC,CAAZ,CAAoBC,CAApB,CAA0B,CAC1C,IAAIC,EAAMC,SAAAC,OACVH,EAAA,CAAWI,KAAJ,CAAgB,CAAN,CAAAH,CAAA,CAAUA,CAAV,CAAgB,CAAhB,CAAoB,CAA9B,CACP,KAAK,IAAII,EAAM,CAAf,CAAkBA,CAAlB,CAAwBJ,CAAxB,CAA6BI,CAAA,EAA7B,CACEL,CAAA,CAAKK,CAAL,CAAW,CAAX,CAAA,CAAgBH,SAAA,CAAUG,CAAV,CAElB,IAAeC,IAAAA,EAAf,GAAIP,CAAJ,CACE,KAAUQ,MAAJ,CACJ,2EADI,CAAN,CAMF,GAAoB,EAApB,CAAIR,CAAAI,OAAJ,EAA2B,UAADK,KAAA,CAAkBT,CAAlB,CAA1B,CACE,KAAUQ,MAAJ,CACJ,mHADI,CAEsDR,CAFtD,CAAN,CAMF,GAAI,CAACD,CAAL,CAAgB,CACd,IAAIW,EAAW,CACXC,EAAAA,CAAU,WAAVA,CACFX,CAAAY,QAAA,CAAe,KAAf,CAAsB,QAAQ,EAAG,CAC/B,MAAOX,EAAA,CAAKS,CAAA,EAAL,CADwB,CAAjC,CAGqB;WAAvB,GAAI,MAAOG,QAAX,EACEA,OAAAC,MAAA,CAAcH,CAAd,CAEF,IAAI,CAGF,KAAUH,MAAJ,CAAUG,CAAV,CAAN,CAHE,CAIF,MAAMI,CAAN,CAAS,EAbG,CApB0B,CAsC9CnB,EAAAC,QAAA,CAAiBC,CA5DuF;\",\n\"sources\":[\"node_modules/warning/browser.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$warning$browser\\\"] = function(global,process,require,module,exports) {\\n/**\\n * Copyright 2014-2015, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n */\\n\\n'use strict';\\n\\n/**\\n * Similar to invariant but only logs a warning if the condition is not met.\\n * This can be used to log issues in development environments in critical\\n * paths. Removing the logging code for production environments will keep the\\n * same logic and follow the same code paths.\\n */\\n\\nvar warning = function() {};\\n\\nif (process.env.NODE_ENV !== 'production') {\\n  warning = function(condition, format, args) {\\n    var len = arguments.length;\\n    args = new Array(len > 2 ? len - 2 : 0);\\n    for (var key = 2; key < len; key++) {\\n      args[key - 2] = arguments[key];\\n    }\\n    if (format === undefined) {\\n      throw new Error(\\n        '`warning(condition, format, ...args)` requires a warning ' +\\n        'message argument'\\n      );\\n    }\\n\\n    if (format.length < 10 || (/^[s\\\\W]*$/).test(format)) {\\n      throw new Error(\\n        'The warning format should be able to uniquely identify this ' +\\n        'warning. Please, use a more descriptive format than: ' + format\\n      );\\n    }\\n\\n    if (!condition) {\\n      var argIndex = 0;\\n      var message = 'Warning: ' +\\n        format.replace(/%s/g, function() {\\n          return args[argIndex++];\\n        });\\n      if (typeof console !== 'undefined') {\\n        console.error(message);\\n      }\\n      try {\\n        // This error was thrown as a convenience so that you can use this stack\\n        // to find the callsite that caused this warning to fire.\\n        throw new Error(message);\\n      } catch(x) {}\\n    }\\n  };\\n}\\n\\nmodule.exports = warning;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"warning\",\"condition\",\"format\",\"args\",\"len\",\"arguments\",\"length\",\"Array\",\"key\",\"undefined\",\"Error\",\"test\",\"argIndex\",\"message\",\"replace\",\"console\",\"error\",\"x\"]\n}\n"]