["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/fbjs/lib/EventListener.js"],"~:js","shadow$provide.module$node_modules$fbjs$lib$EventListener=function(k,A,f,m,F){var c=f(\"module$node_modules$fbjs$lib$emptyFunction\");m.exports={listen:function(c,e,f){if(c.addEventListener)return c.addEventListener(e,f,!1),{remove:function(){c.removeEventListener(e,f,!1)}};if(c.attachEvent)return c.attachEvent(\"on\"+e,f),{remove:function(){c.detachEvent(\"on\"+e,f)}}},capture:function(f,e,k){if(f.addEventListener)return f.addEventListener(e,k,!0),{remove:function(){f.removeEventListener(e,k,!0)}};console.error(\"Attempted to listen to events during the capture phase on a browser that does not support the capture phase. Your application will not receive some events.\");\nreturn{remove:c}},registerDefault:function(){}}}","~:source","shadow$provide[\"module$node_modules$fbjs$lib$EventListener\"] = function(global,process,require,module,exports) {\n'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Upstream version of event listener. Does not take into account specific\n * nature of platform.\n */\nvar EventListener = {\n  /**\n   * Listen to DOM events during the bubble phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  listen: function listen(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, false);\n      return {\n        remove: function remove() {\n          target.removeEventListener(eventType, callback, false);\n        }\n      };\n    } else if (target.attachEvent) {\n      target.attachEvent('on' + eventType, callback);\n      return {\n        remove: function remove() {\n          target.detachEvent('on' + eventType, callback);\n        }\n      };\n    }\n  },\n\n  /**\n   * Listen to DOM events during the capture phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  capture: function capture(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, true);\n      return {\n        remove: function remove() {\n          target.removeEventListener(eventType, callback, true);\n        }\n      };\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');\n      }\n      return {\n        remove: emptyFunction\n      };\n    }\n  },\n\n  registerDefault: function registerDefault() {}\n};\n\nmodule.exports = EventListener;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$fbjs$lib$emptyFunction"]],"~:properties",["^5",["registerDefault","listen","remove","capture"]],"~:compiled-at",1519925395293,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$fbjs$lib$EventListener.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,2CAAA,CAA+D,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAwBC,CAAxB,CAA+BC,CAA/B,CAAwC,CAY/G,IAAIC,EAAgBH,CAAA,CAAQ,4CAAR,CA8DpBC,EAAAC,QAAA,CAxDoBE,CASlBC,OAAQA,QAAe,CAACC,CAAD,CAASC,CAAT,CAAoBC,CAApB,CAA8B,CACnD,GAAIF,CAAAG,iBAAJ,CAEE,MADAH,EAAAG,iBAAA,CAAwBF,CAAxB,CAAmCC,CAAnC,CAA6C,CAAA,CAA7C,CACO,CAAA,CACLE,OAAQA,QAAe,EAAG,CACxBJ,CAAAK,oBAAA,CAA2BJ,CAA3B,CAAsCC,CAAtC,CAAgD,CAAA,CAAhD,CADwB,CADrB,CAKF,IAAIF,CAAAM,YAAJ,CAEL,MADAN,EAAAM,YAAA,CAAmB,IAAnB,CAA0BL,CAA1B,CAAqCC,CAArC,CACO,CAAA,CACLE,OAAQA,QAAe,EAAG,CACxBJ,CAAAO,YAAA,CAAmB,IAAnB,CAA0BN,CAA1B,CAAqCC,CAArC,CADwB,CADrB,CAV0C,CATnCJ,CAmClBU,QAASA,QAAgB,CAACR,CAAD,CAASC,CAAT,CAAoBC,CAApB,CAA8B,CACrD,GAAIF,CAAAG,iBAAJ,CAEE,MADAH,EAAAG,iBAAA,CAAwBF,CAAxB,CAAmCC,CAAnC,CAA6C,CAAA,CAA7C,CACO,CAAA,CACLE,OAAQA,QAAe,EAAG,CACxBJ,CAAAK,oBAAA,CAA2BJ,CAA3B,CAAsCC,CAAtC,CAAgD,CAAA,CAAhD,CADwB,CADrB,CAOLO,QAAAC,MAAA,CAAc,6JAAd,CAEF;MAAO,CACLN,OAAQP,CADH,CAZ4C,CAnCrCC,CAqDlBa,gBAAiBA,QAAwB,EAAG,EArD1Bb,CAlB2F;\",\n\"sources\":[\"node_modules/fbjs/lib/EventListener.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$fbjs$lib$EventListener\\\"] = function(global,process,require,module,exports) {\\n'use strict';\\n\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n *\\n * @typechecks\\n */\\n\\nvar emptyFunction = require('./emptyFunction');\\n\\n/**\\n * Upstream version of event listener. Does not take into account specific\\n * nature of platform.\\n */\\nvar EventListener = {\\n  /**\\n   * Listen to DOM events during the bubble phase.\\n   *\\n   * @param {DOMEventTarget} target DOM element to register listener on.\\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\\n   * @param {function} callback Callback function.\\n   * @return {object} Object with a `remove` method.\\n   */\\n  listen: function listen(target, eventType, callback) {\\n    if (target.addEventListener) {\\n      target.addEventListener(eventType, callback, false);\\n      return {\\n        remove: function remove() {\\n          target.removeEventListener(eventType, callback, false);\\n        }\\n      };\\n    } else if (target.attachEvent) {\\n      target.attachEvent('on' + eventType, callback);\\n      return {\\n        remove: function remove() {\\n          target.detachEvent('on' + eventType, callback);\\n        }\\n      };\\n    }\\n  },\\n\\n  /**\\n   * Listen to DOM events during the capture phase.\\n   *\\n   * @param {DOMEventTarget} target DOM element to register listener on.\\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\\n   * @param {function} callback Callback function.\\n   * @return {object} Object with a `remove` method.\\n   */\\n  capture: function capture(target, eventType, callback) {\\n    if (target.addEventListener) {\\n      target.addEventListener(eventType, callback, true);\\n      return {\\n        remove: function remove() {\\n          target.removeEventListener(eventType, callback, true);\\n        }\\n      };\\n    } else {\\n      if (process.env.NODE_ENV !== 'production') {\\n        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');\\n      }\\n      return {\\n        remove: emptyFunction\\n      };\\n    }\\n  },\\n\\n  registerDefault: function registerDefault() {}\\n};\\n\\nmodule.exports = EventListener;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"emptyFunction\",\"EventListener\",\"listen\",\"target\",\"eventType\",\"callback\",\"addEventListener\",\"remove\",\"removeEventListener\",\"attachEvent\",\"detachEvent\",\"capture\",\"console\",\"error\",\"registerDefault\"]\n}\n"]