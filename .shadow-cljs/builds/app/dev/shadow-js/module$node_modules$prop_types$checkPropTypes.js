["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/prop-types/checkPropTypes.js"],"~:js","shadow$provide.module$node_modules$prop_types$checkPropTypes=function(k,A,f,m,F){var c=f(\"module$node_modules$fbjs$lib$invariant\"),q=f(\"module$node_modules$fbjs$lib$warning\"),e=f(\"module$node_modules$prop_types$lib$ReactPropTypesSecret\"),y={};m.exports=function(f,k,m,A,F){for(var fa in f)if(f.hasOwnProperty(fa)){try{c(\"function\"===typeof f[fa],\"%s: %s type `%s` is invalid; it must be a function, usually from the `prop-types` package, but received `%s`.\",A||\"React class\",m,fa,typeof f[fa]);var M=f[fa](k,\nfa,A,m,null,e)}catch(wa){M=wa}q(!M||M instanceof Error,\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\",A||\"React class\",m,fa,typeof M);if(M instanceof Error&&!(M.message in y)){y[M.message]=!0;var ja=F?F():\"\";q(!1,\"Failed %s type: %s%s\",m,M.message,null!=ja?ja:\"\")}}}}","~:source","shadow$provide[\"module$node_modules$prop_types$checkPropTypes\"] = function(global,process,require,module,exports) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== 'production') {\n  var invariant = require('fbjs/lib/invariant');\n  var warning = require('fbjs/lib/warning');\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n  var loggedTypeFailures = {};\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var typeSpecName in typeSpecs) {\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = checkPropTypes;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$prop_types$lib$ReactPropTypesSecret","~$module$node_modules$fbjs$lib$warning"]],"~:properties",["^5",[]],"~:compiled-at",1519925395244,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$prop_types$checkPropTypes.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,8CAAA,CAAkE,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAwBC,CAAxB,CAA+BC,CAA/B,CAAwC,CAWhH,IAAIC,EAAYH,CAAA,CAAQ,wCAAR,CAAhB,CACII,EAAUJ,CAAA,CAAQ,sCAAR,CADd,CAEIK,EAAuBL,CAAA,CAAQ,yDAAR,CAF3B,CAGIM,EAAqB,EA6C3BL,EAAAC,QAAA,CA/BAK,QAAuB,CAACC,CAAD,CAAYC,CAAZ,CAAoBC,CAApB,CAA8BC,CAA9B,CAA6CC,CAA7C,CAAuD,CAE1E,IAAKC,IAAIA,EAAT,GAAyBL,EAAzB,CACE,GAAIA,CAAAM,eAAA,CAAyBD,EAAzB,CAAJ,CAA4C,CAK1C,GAAI,CAGFV,CAAA,CAA6C,UAA7C,GAAU,MAAOK,EAAA,CAAUK,EAAV,CAAjB,CAAyD,+GAAzD,CAA+KF,CAA/K,EAAgM,aAAhM,CAA+MD,CAA/M,CAAyNG,EAAzN,CAAuO,MAAOL,EAAA,CAAUK,EAAV,CAA9O,CACA,KAAAE,EAAQP,CAAA,CAAUK,EAAV,CAAA,CAAwBJ,CAAxB;AAAgCI,EAAhC,CAA8CF,CAA9C,CAA6DD,CAA7D,CAAuE,IAAvE,CAA6EL,CAA7E,CAJN,CAKF,MAAOW,EAAP,CAAW,CACXD,CAAA,CAAQC,EADG,CAGbZ,CAAA,CAAQ,CAACW,CAAT,EAAkBA,CAAlB,WAAmCE,MAAnC,CAA0C,0RAA1C,CAA0VN,CAA1V,EAA2W,aAA3W,CAA0XD,CAA1X,CAAoYG,EAApY,CAAkZ,MAAOE,EAAzZ,CACA,IAAIA,CAAJ,WAAqBE,MAArB,EAA8B,EAAEF,CAAAG,QAAF,GAAmBZ,EAAnB,CAA9B,CAAsE,CAGpEA,CAAA,CAAmBS,CAAAG,QAAnB,CAAA,CAAoC,CAAA,CAEpC,KAAIC,GAAQP,CAAA,CAAWA,CAAA,EAAX,CAAwB,EAEpCR,EAAA,CAAQ,CAAA,CAAR,CAAe,sBAAf,CAAuCM,CAAvC,CAAiDK,CAAAG,QAAjD,CAAyE,IAAT,EAAAC,EAAA,CAAgBA,EAAhB,CAAwB,EAAxF,CAPoE,CAd5B,CAH4B,CA5BoC;\",\n\"sources\":[\"node_modules/prop-types/checkPropTypes.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$prop_types$checkPropTypes\\\"] = function(global,process,require,module,exports) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n'use strict';\\n\\nif (process.env.NODE_ENV !== 'production') {\\n  var invariant = require('fbjs/lib/invariant');\\n  var warning = require('fbjs/lib/warning');\\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\\n  var loggedTypeFailures = {};\\n}\\n\\n/**\\n * Assert that the values match with the type specs.\\n * Error messages are memorized and will only be shown once.\\n *\\n * @param {object} typeSpecs Map of name to a ReactPropType\\n * @param {object} values Runtime values that need to be type-checked\\n * @param {string} location e.g. \\\"prop\\\", \\\"context\\\", \\\"child context\\\"\\n * @param {string} componentName Name of the component for error messages.\\n * @param {?Function} getStack Returns the component stack.\\n * @private\\n */\\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\\n  if (process.env.NODE_ENV !== 'production') {\\n    for (var typeSpecName in typeSpecs) {\\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {\\n        var error;\\n        // Prop type validation may throw. In case they do, we don't want to\\n        // fail the render phase where it didn't fail before. So we log it.\\n        // After these have been cleaned up, we'll let them throw.\\n        try {\\n          // This is intentionally an invariant that gets caught. It's the same\\n          // behavior as without this statement except with a better message.\\n          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);\\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\\n        } catch (ex) {\\n          error = ex;\\n        }\\n        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);\\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\\n          // Only monitor this failure once because there tends to be a lot of the\\n          // same error.\\n          loggedTypeFailures[error.message] = true;\\n\\n          var stack = getStack ? getStack() : '';\\n\\n          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');\\n        }\\n      }\\n    }\\n  }\\n}\\n\\nmodule.exports = checkPropTypes;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"invariant\",\"warning\",\"ReactPropTypesSecret\",\"loggedTypeFailures\",\"checkPropTypes\",\"typeSpecs\",\"values\",\"location\",\"componentName\",\"getStack\",\"typeSpecName\",\"hasOwnProperty\",\"error\",\"ex\",\"Error\",\"message\",\"stack\"]\n}\n"]