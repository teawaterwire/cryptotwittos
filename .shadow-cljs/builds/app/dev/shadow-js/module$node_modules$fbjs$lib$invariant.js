["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/fbjs/lib/invariant.js"],"~:js","shadow$provide.module$node_modules$fbjs$lib$invariant=function(k,A,f,m,F){var c=function(c){};c=function(c){if(void 0===c)throw Error(\"invariant requires an error message argument\");};m.exports=function(f,e,y,k,m,A,F,hb){c(e);if(!f){if(void 0===e)f=Error(\"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\");else{var q=[y,k,m,A,F,hb],ja=0;f=Error(e.replace(/%s/g,function(){return q[ja++]}));f.name=\"Invariant Violation\"}f.framesToPop=\n1;throw f;}}}","~:source","shadow$provide[\"module$node_modules$fbjs$lib$invariant\"] = function(global,process,require,module,exports) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["framesToPop","name"]],"~:compiled-at",1519925395234,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$fbjs$lib$invariant.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,uCAAA,CAA2D,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAwBC,CAAxB,CAA+BC,CAA/B,CAAwC,CAsB3G,IAAIC,EAAiBA,QAAuB,CAACC,CAAD,CAAS,EAGnDD,EAAA,CAAiBA,QAAuB,CAACC,CAAD,CAAS,CAC/C,GAAeC,IAAAA,EAAf,GAAID,CAAJ,CACE,KAAUE,MAAJ,CAAU,8CAAV,CAAN,CAF6C,CA4BnDL,EAAAC,QAAA,CArBAK,QAAkB,CAACC,CAAD,CAAYJ,CAAZ,CAAoBK,CAApB,CAAuBC,CAAvB,CAA0BC,CAA1B,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAmCC,EAAnC,CAAsC,CACtDX,CAAA,CAAeC,CAAf,CAEA,IAAI,CAACI,CAAL,CAAgB,CAEd,GAAeH,IAAAA,EAAf,GAAID,CAAJ,CACEW,CAAA,CAAYT,KAAJ,CAAU,+HAAV,CADV,KAEO,CACL,IAAIU,EAAO,CAACP,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CAAaC,CAAb,CAAgBC,EAAhB,CAAX,CACIG,GAAW,CACfF,EAAA,CAAYT,KAAJ,CAAUF,CAAAc,QAAA,CAAe,KAAf,CAAsB,QAAS,EAAG,CAClD,MAAOF,EAAA,CAAKC,EAAA,EAAL,CAD2C,CAAlC,CAAV,CAGRF,EAAAI,KAAA,CAAa,qBANR,CASPJ,CAAAK,YAAA;AAAoB,CACpB,MAAML,EAAN,CAdc,CAHsC,CAhCmD;\",\n\"sources\":[\"node_modules/fbjs/lib/invariant.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$fbjs$lib$invariant\\\"] = function(global,process,require,module,exports) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n *\\n */\\n\\n'use strict';\\n\\n/**\\n * Use invariant() to assert state which your program assumes to be true.\\n *\\n * Provide sprintf-style format (only %s is supported) and arguments\\n * to provide information about what broke and what you were\\n * expecting.\\n *\\n * The invariant message will be stripped in production, but the invariant\\n * will remain to ensure logic does not differ in production.\\n */\\n\\nvar validateFormat = function validateFormat(format) {};\\n\\nif (process.env.NODE_ENV !== 'production') {\\n  validateFormat = function validateFormat(format) {\\n    if (format === undefined) {\\n      throw new Error('invariant requires an error message argument');\\n    }\\n  };\\n}\\n\\nfunction invariant(condition, format, a, b, c, d, e, f) {\\n  validateFormat(format);\\n\\n  if (!condition) {\\n    var error;\\n    if (format === undefined) {\\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\\n    } else {\\n      var args = [a, b, c, d, e, f];\\n      var argIndex = 0;\\n      error = new Error(format.replace(/%s/g, function () {\\n        return args[argIndex++];\\n      }));\\n      error.name = 'Invariant Violation';\\n    }\\n\\n    error.framesToPop = 1; // we don't care about invariant's own frame\\n    throw error;\\n  }\\n}\\n\\nmodule.exports = invariant;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"validateFormat\",\"format\",\"undefined\",\"Error\",\"invariant\",\"condition\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"error\",\"args\",\"argIndex\",\"replace\",\"name\",\"framesToPop\"]\n}\n"]