["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/material-ui/utils/colorManipulator.js"],"~:js","shadow$provide.module$node_modules$material_ui$utils$colorManipulator=function(b,e,a,d,f){function c(a){var b=a.type,c=a.values;if(-1<b.indexOf(\"rgb\"))for(var d=0;3>d;d++)c[d]=parseInt(c[d]);b=-1<b.indexOf(\"hsl\")?a.type+\"(\"+c[0]+\", \"+c[1]+\"%, \"+c[2]+\"%\":a.type+\"(\"+c[0]+\", \"+c[1]+\", \"+c[2];return b=4===c.length?b+(\", \"+a.values[3]+\")\"):b+\")\"}function g(a){if(4===a.length){for(var b=\"#\",c=1;c<a.length;c++)b+=a.charAt(c)+a.charAt(c);a=b}b=parseInt(a.substr(1,2),16);c=parseInt(a.substr(3,2),16);a=parseInt(a.substr(5,\n2),16);return\"rgb(\"+b+\", \"+c+\", \"+a+\")\"}function h(a){if(\"#\"===a.charAt(0))return h(g(a));var b=a.indexOf(\"(\");(0,p.default)(-1!==b,\"Material-UI: The \"+a+\" color was not parsed correctly,\\n  because it has an unsupported format (color name or RGB %). This may cause issues in component rendering.\");var c=a.substring(0,b);a=a.substring(b+1,a.length-1).split(\",\");a=a.map(function(a){return parseFloat(a)});return{type:c,values:a}}function k(a){a=h(a);if(-1<a.type.indexOf(\"rgb\"))return a=a.values.map(function(a){a/=\n255;return.03928>=a?a/12.92:Math.pow((a+.055)/1.055,2.4)}),Number((.2126*a[0]+.7152*a[1]+.0722*a[2]).toFixed(3));if(-1<a.type.indexOf(\"hsl\"))return a.values[2]/100}function m(a,b){a=h(a);b=0>b?0:1<b?1:b;if(-1<a.type.indexOf(\"hsl\"))a.values[2]*=1-b;else if(-1<a.type.indexOf(\"rgb\"))for(var d=0;3>d;d++)a.values[d]*=1-b;return c(a)}function n(a,b){a=h(a);b=0>b?0:1<b?1:b;if(-1<a.type.indexOf(\"hsl\"))a.values[2]+=(100-a.values[2])*b;else if(-1<a.type.indexOf(\"rgb\"))for(var d=0;3>d;d++)a.values[d]+=(255-\na.values[d])*b;return c(a)}Object.defineProperty(f,\"__esModule\",{value:!0});f.convertColorToString=c;f.convertHexToRGB=g;f.decomposeColor=h;f.getContrastRatio=function(a,b){a=k(a);b=k(b);return Number(((Math.max(a,b)+.05)/(Math.min(a,b)+.05)).toFixed(2))};f.getLuminance=k;f.emphasize=function(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:.15;return.5<k(a)?m(a,b):n(a,b)};f.fade=function(a,b){a=h(a);if(\"rgb\"===a.type||\"hsl\"===a.type)a.type+=\"a\";a.values[3]=0>b?0:1<b?1:b;return c(a)};\nf.darken=m;f.lighten=n;var p=(b=a(\"module$node_modules$warning$browser\"))&&b.__esModule?b:{default:b}}","~:source","shadow$provide[\"module$node_modules$material_ui$utils$colorManipulator\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertColorToString = convertColorToString;\nexports.convertHexToRGB = convertHexToRGB;\nexports.decomposeColor = decomposeColor;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.emphasize = emphasize;\nexports.fade = fade;\nexports.darken = darken;\nexports.lighten = lighten;\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value, min, max) {\n  if (value < min) {\n    return min;\n  }\n  if (value > max) {\n    return max;\n  }\n  return value;\n}\n\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of, 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\nfunction convertColorToString(color) {\n  var type = color.type,\n      values = color.values;\n\n\n  if (type.indexOf('rgb') > -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    for (var i = 0; i < 3; i++) {\n      values[i] = parseInt(values[i]);\n    }\n  }\n\n  var colorString = void 0;\n\n  if (type.indexOf('hsl') > -1) {\n    colorString = color.type + '(' + values[0] + ', ' + values[1] + '%, ' + values[2] + '%';\n  } else {\n    colorString = color.type + '(' + values[0] + ', ' + values[1] + ', ' + values[2];\n  }\n\n  if (values.length === 4) {\n    colorString += ', ' + color.values[3] + ')';\n  } else {\n    colorString += ')';\n  }\n\n  return colorString;\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n *  @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n *  @returns {string} A CSS rgb color string\n */\nfunction convertHexToRGB(color) {\n  if (color.length === 4) {\n    var extendedColor = '#';\n    for (var i = 1; i < color.length; i++) {\n      extendedColor += color.charAt(i) + color.charAt(i);\n    }\n    color = extendedColor;\n  }\n\n  var values = {\n    r: parseInt(color.substr(1, 2), 16),\n    g: parseInt(color.substr(3, 2), 16),\n    b: parseInt(color.substr(5, 2), 16)\n  };\n\n  return 'rgb(' + values.r + ', ' + values.g + ', ' + values.b + ')';\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values and color names.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {{type: string, values: number[]}} A MUI color object\n */\nfunction decomposeColor(color) {\n  if (color.charAt(0) === '#') {\n    return decomposeColor(convertHexToRGB(color));\n  }\n\n  var marker = color.indexOf('(');\n\n  process.env.NODE_ENV !== \"production\" ? (0, _warning2.default)(marker !== -1, 'Material-UI: The ' + color + ' color was not parsed correctly,\\n  because it has an unsupported format (color name or RGB %). This may cause issues in component rendering.') : void 0;\n\n  var type = color.substring(0, marker);\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n\n  return { type: type, values: values };\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21 with 2 digit precision.\n */\nfunction getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  var contrastRatio = (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n\n  return Number(contrastRatio.toFixed(2)); // Truncate at two digits\n}\n\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/WAI/GL/wiki/Relative_luminance\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\nfunction getLuminance(color) {\n  color = decomposeColor(color);\n\n  if (color.type.indexOf('rgb') > -1) {\n    var rgb = color.values.map(function (val) {\n      val /= 255; // normalized\n      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n    });\n    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3)); // Truncate at 3 digits\n  } else if (color.type.indexOf('hsl') > -1) {\n    return color.values[2] / 100;\n  }\n}\n\n/**\n * Darken or lighten a colour, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction emphasize(color) {\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction fade(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value, 0, 1);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n  color.values[3] = value;\n\n  return convertColorToString(color);\n}\n\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient, 0, 1);\n\n  if (color.type.indexOf('hsl') > -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') > -1) {\n    for (var i = 0; i < 3; i++) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n  return convertColorToString(color);\n}\n\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient, 0, 1);\n\n  if (color.type.indexOf('hsl') > -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') > -1) {\n    for (var i = 0; i < 3; i++) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return convertColorToString(color);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$warning$browser"]],"~:properties",["^5",["values","emphasize","darken","lighten","fade","__esModule","decomposeColor","value","getLuminance","type","getContrastRatio","convertColorToString","convertHexToRGB","default"]],"~:compiled-at",1519929620007,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$material_ui$utils$colorManipulator.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/material-ui/utils/colorManipulator.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$material_ui$utils$colorManipulator\\\"] = function(global,process,require,module,exports) {\\n'use strict';\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.convertColorToString = convertColorToString;\\nexports.convertHexToRGB = convertHexToRGB;\\nexports.decomposeColor = decomposeColor;\\nexports.getContrastRatio = getContrastRatio;\\nexports.getLuminance = getLuminance;\\nexports.emphasize = emphasize;\\nexports.fade = fade;\\nexports.darken = darken;\\nexports.lighten = lighten;\\n\\nvar _warning = require('warning');\\n\\nvar _warning2 = _interopRequireDefault(_warning);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n/**\\n * Returns a number whose value is limited to the given range.\\n *\\n * @param {number} value The value to be clamped\\n * @param {number} min The lower boundary of the output range\\n * @param {number} max The upper boundary of the output range\\n * @returns {number} A number in the range [min, max]\\n */\\nfunction clamp(value, min, max) {\\n  if (value < min) {\\n    return min;\\n  }\\n  if (value > max) {\\n    return max;\\n  }\\n  return value;\\n}\\n\\n/**\\n * Converts a color object with type and values to a string.\\n *\\n * @param {object} color - Decomposed color\\n * @param {string} color.type - One of, 'rgb', 'rgba', 'hsl', 'hsla'\\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\\n * @returns {string} A CSS color string\\n */\\nfunction convertColorToString(color) {\\n  var type = color.type,\\n      values = color.values;\\n\\n\\n  if (type.indexOf('rgb') > -1) {\\n    // Only convert the first 3 values to int (i.e. not alpha)\\n    for (var i = 0; i < 3; i++) {\\n      values[i] = parseInt(values[i]);\\n    }\\n  }\\n\\n  var colorString = void 0;\\n\\n  if (type.indexOf('hsl') > -1) {\\n    colorString = color.type + '(' + values[0] + ', ' + values[1] + '%, ' + values[2] + '%';\\n  } else {\\n    colorString = color.type + '(' + values[0] + ', ' + values[1] + ', ' + values[2];\\n  }\\n\\n  if (values.length === 4) {\\n    colorString += ', ' + color.values[3] + ')';\\n  } else {\\n    colorString += ')';\\n  }\\n\\n  return colorString;\\n}\\n\\n/**\\n * Converts a color from CSS hex format to CSS rgb format.\\n *\\n *  @param {string} color - Hex color, i.e. #nnn or #nnnnnn\\n *  @returns {string} A CSS rgb color string\\n */\\nfunction convertHexToRGB(color) {\\n  if (color.length === 4) {\\n    var extendedColor = '#';\\n    for (var i = 1; i < color.length; i++) {\\n      extendedColor += color.charAt(i) + color.charAt(i);\\n    }\\n    color = extendedColor;\\n  }\\n\\n  var values = {\\n    r: parseInt(color.substr(1, 2), 16),\\n    g: parseInt(color.substr(3, 2), 16),\\n    b: parseInt(color.substr(5, 2), 16)\\n  };\\n\\n  return 'rgb(' + values.r + ', ' + values.g + ', ' + values.b + ')';\\n}\\n\\n/**\\n * Returns an object with the type and values of a color.\\n *\\n * Note: Does not support rgb % values and color names.\\n *\\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\\n * @returns {{type: string, values: number[]}} A MUI color object\\n */\\nfunction decomposeColor(color) {\\n  if (color.charAt(0) === '#') {\\n    return decomposeColor(convertHexToRGB(color));\\n  }\\n\\n  var marker = color.indexOf('(');\\n\\n  process.env.NODE_ENV !== \\\"production\\\" ? (0, _warning2.default)(marker !== -1, 'Material-UI: The ' + color + ' color was not parsed correctly,\\\\n  because it has an unsupported format (color name or RGB %). This may cause issues in component rendering.') : void 0;\\n\\n  var type = color.substring(0, marker);\\n  var values = color.substring(marker + 1, color.length - 1).split(',');\\n  values = values.map(function (value) {\\n    return parseFloat(value);\\n  });\\n\\n  return { type: type, values: values };\\n}\\n\\n/**\\n * Calculates the contrast ratio between two colors.\\n *\\n * Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\\n *\\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\\n * @returns {number} A contrast ratio value in the range 0 - 21 with 2 digit precision.\\n */\\nfunction getContrastRatio(foreground, background) {\\n  var lumA = getLuminance(foreground);\\n  var lumB = getLuminance(background);\\n  var contrastRatio = (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\\n\\n  return Number(contrastRatio.toFixed(2)); // Truncate at two digits\\n}\\n\\n/**\\n * The relative brightness of any point in a color space,\\n * normalized to 0 for darkest black and 1 for lightest white.\\n *\\n * Formula: https://www.w3.org/WAI/GL/wiki/Relative_luminance\\n *\\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\\n * @returns {number} The relative brightness of the color in the range 0 - 1\\n */\\nfunction getLuminance(color) {\\n  color = decomposeColor(color);\\n\\n  if (color.type.indexOf('rgb') > -1) {\\n    var rgb = color.values.map(function (val) {\\n      val /= 255; // normalized\\n      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\\n    });\\n    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3)); // Truncate at 3 digits\\n  } else if (color.type.indexOf('hsl') > -1) {\\n    return color.values[2] / 100;\\n  }\\n}\\n\\n/**\\n * Darken or lighten a colour, depending on its luminance.\\n * Light colors are darkened, dark colors are lightened.\\n *\\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\\n * @returns {string} A CSS color string. Hex input values are returned as rgb\\n */\\nfunction emphasize(color) {\\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\\n\\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\\n}\\n\\n/**\\n * Set the absolute transparency of a color.\\n * Any existing alpha values are overwritten.\\n *\\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\\n * @param {number} value - value to set the alpha channel to in the range 0 -1\\n * @returns {string} A CSS color string. Hex input values are returned as rgb\\n */\\nfunction fade(color, value) {\\n  color = decomposeColor(color);\\n  value = clamp(value, 0, 1);\\n\\n  if (color.type === 'rgb' || color.type === 'hsl') {\\n    color.type += 'a';\\n  }\\n  color.values[3] = value;\\n\\n  return convertColorToString(color);\\n}\\n\\n/**\\n * Darkens a color.\\n *\\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\\n * @param {number} coefficient - multiplier in the range 0 - 1\\n * @returns {string} A CSS color string. Hex input values are returned as rgb\\n */\\nfunction darken(color, coefficient) {\\n  color = decomposeColor(color);\\n  coefficient = clamp(coefficient, 0, 1);\\n\\n  if (color.type.indexOf('hsl') > -1) {\\n    color.values[2] *= 1 - coefficient;\\n  } else if (color.type.indexOf('rgb') > -1) {\\n    for (var i = 0; i < 3; i++) {\\n      color.values[i] *= 1 - coefficient;\\n    }\\n  }\\n  return convertColorToString(color);\\n}\\n\\n/**\\n * Lightens a color.\\n *\\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\\n * @param {number} coefficient - multiplier in the range 0 - 1\\n * @returns {string} A CSS color string. Hex input values are returned as rgb\\n */\\nfunction lighten(color, coefficient) {\\n  color = decomposeColor(color);\\n  coefficient = clamp(coefficient, 0, 1);\\n\\n  if (color.type.indexOf('hsl') > -1) {\\n    color.values[2] += (100 - color.values[2]) * coefficient;\\n  } else if (color.type.indexOf('rgb') > -1) {\\n    for (var i = 0; i < 3; i++) {\\n      color.values[i] += (255 - color.values[i]) * coefficient;\\n    }\\n  }\\n\\n  return convertColorToString(color);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"convertColorToString\",\"color\",\"type\",\"values\",\"indexOf\",\"i\",\"parseInt\",\"colorString\",\"length\",\"convertHexToRGB\",\"extendedColor\",\"charAt\",\"substr\",\"r\",\"g\",\"b\",\"decomposeColor\",\"marker\",\"_warning2\",\"default\",\"substring\",\"split\",\"map\",\"value\",\"parseFloat\",\"getLuminance\",\"rgb\",\"val\",\"Math\",\"pow\",\"Number\",\"toFixed\",\"darken\",\"coefficient\",\"min\",\"max\",\"lighten\",\"Object\",\"defineProperty\",\"getContrastRatio\",\"foreground\",\"background\",\"lumA\",\"lumB\",\"emphasize\",\"arguments\",\"undefined\",\"fade\",\"_warning\",\"__esModule\"]\n}\n"]